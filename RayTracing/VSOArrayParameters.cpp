//-*-mode:c++; mode:font-lock;-*-

// AUTOMATICALLY GENERATED by code_gen_array_ini_cpp.pl DO NOT EDIT!!

#include <fstream>
#include <iostream>
#include <sstream>
#include <memory>
#include <vector>
#include <limits>
#include <cassert>

#include <VSDataConverter.hpp>

#include <VSLineTokenizer.hpp>

#include "VSOArrayParameters.hpp"

using namespace Physics;
using namespace VERITAS;

const std::string VSOArrayParameters::scCollection("ArrayINI");

#define inf std::numeric_limits<double>::infinity();
double     VSOArrayParameters::sCanonicalArrayLatitude                  = VSReturnedTypeDatumConverter<double>::fromString("0.0000000");
double     VSOArrayParameters::sCanonicalArrayLongitude                 = VSReturnedTypeDatumConverter<double>::fromString("0.0000000");
double     VSOArrayParameters::sCanonicalArrayAltitude                  = VSReturnedTypeDatumConverter<double>::fromString("0");
unsigned   VSOArrayParameters::sCanonicalArrayNumTelRings               = VSReturnedTypeDatumConverter<unsigned>::fromString("0");
double     VSOArrayParameters::sCanonicalArrayTelSpacing                = VSReturnedTypeDatumConverter<double>::fromString("10000.");
bool       VSOArrayParameters::sCanonicalArrayLabelingParity            = VSReturnedTypeDatumConverter<bool>::fromString("0");
std::string VSOArrayParameters::sCanonicalScopeMissingList               = VSReturnedTypeDatumConverter<std::string>::fromString("");
double     VSOArrayParameters::sCanonicalScopePosXYDisp                 = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalScopePosZDisp                  = VSReturnedTypeDatumConverter<double>::fromString("0.");
std::string VSOArrayParameters::sCanonicalScopePosNorth                  = VSReturnedTypeDatumConverter<std::string>::fromString("");
std::string VSOArrayParameters::sCanonicalScopePosEast                   = VSReturnedTypeDatumConverter<std::string>::fromString("");
std::string VSOArrayParameters::sCanonicalScopePosASL                    = VSReturnedTypeDatumConverter<std::string>::fromString("");
double     VSOArrayParameters::sCanonicalScopeDeltaY                    = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalScopeAlphaX                    = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalScopeAlphaY                    = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalScopeElevation                 = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalScopeAzimuth                   = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalScopeTranslationX              = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalScopeTranslationY              = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalScopeTranslationZ              = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalReflectorCurvR                 = VSReturnedTypeDatumConverter<double>::fromString("1920.");
double     VSOArrayParameters::sCanonicalReflectorApert                 = VSReturnedTypeDatumConverter<double>::fromString("1230.");
double     VSOArrayParameters::sCanonicalReflectorRot                   = VSReturnedTypeDatumConverter<double>::fromString("1.5707963267948966");
unsigned   VSOArrayParameters::sCanonicalReflectorAlignMode             = VSReturnedTypeDatumConverter<unsigned>::fromString("1");
double     VSOArrayParameters::sCanonicalReflectorAlignObjectPlane      = VSReturnedTypeDatumConverter<double>::fromString("inf");
double     VSOArrayParameters::sCanonicalReflectorAlignImagePlane       = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalReflectorAlignPtX              = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalReflectorAlignPtY              = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalReflectorAlignPtZ              = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalReflectorAlignPtXZDisp         = VSReturnedTypeDatumConverter<double>::fromString("0");
double     VSOArrayParameters::sCanonicalReflectorAlignPtYDisp          = VSReturnedTypeDatumConverter<double>::fromString("0");
double     VSOArrayParameters::sCanonicalReflectorFPAlignTheta          = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalReflectorFPAlignPhi            = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalReflectorIP                    = VSReturnedTypeDatumConverter<double>::fromString("0.");
std::string VSOArrayParameters::sCanonicalReflectorObscuration           = VSReturnedTypeDatumConverter<std::string>::fromString("DISK(0.0,1600.0,0.0,0.0,1.0,0.0,137.5,true),TUBE(0.0,1600.0,0.0,0.0,1770.0,0.0,137.5,true),TUBE(300.0,121.0,600.0,127.0,1685.0,52.6,8.5,true),TUBE(-300.0,121.0,600.0,-127.0,1685.0,52.6,8.5,true),TUBE(300.0,121.0,-600.0,127.0,1685.0,-52.6,8.5,true),TUBE(-300.0,121.0,-600.0,-127.0,1685.0,-52.6,8.5,true),TUBE(181.7,1191.1,225.5,127.0,1685.0,-52.6,7.0,true),TUBE(-181.7,1191.1,225.5,-127.0,1685.0,-52.6,7.0,true),TUBE(181.7,1191.1,225.5,300.0,121.0,-600.0,7.0,true),TUBE(-181.7,1191.1,225.5,-300.0,121.0,-600.0,7.0,true)");
double     VSOArrayParameters::sCanonicalMirrorFacetSpacing             = VSReturnedTypeDatumConverter<double>::fromString("122.");
double     VSOArrayParameters::sCanonicalMirrorFacetSize                = VSReturnedTypeDatumConverter<double>::fromString("120.");
double     VSOArrayParameters::sCanonicalMirrorFLength                  = VSReturnedTypeDatumConverter<double>::fromString("1607.");
double     VSOArrayParameters::sCanonicalMirrorFLengthDisp              = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalMirrorSpotSizePhotonFraction   = VSReturnedTypeDatumConverter<double>::fromString("0.80");
double     VSOArrayParameters::sCanonicalMirrorSpotSize                 = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalMirrorSpotSizeDisp             = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalMirrorDegradingFactor          = VSReturnedTypeDatumConverter<double>::fromString("1.0");
double     VSOArrayParameters::sCanonicalMirrorAlignTangentDisp         = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalMirrorPosTangentDisp           = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalMirrorPosNormalDisp            = VSReturnedTypeDatumConverter<double>::fromString("0.");
bool       VSOArrayParameters::sCanonicalMirrorLabelingParity           = VSReturnedTypeDatumConverter<bool>::fromString("0");
std::string VSOArrayParameters::sCanonicalMirrorMissingList              = VSReturnedTypeDatumConverter<std::string>::fromString("1,62,67,72,77,82,87");
double     VSOArrayParameters::sCanonicalCameraDiameter                 = VSReturnedTypeDatumConverter<double>::fromString("235.");
double     VSOArrayParameters::sCanonicalCameraFPTransX                 = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalCameraFPTransY                 = VSReturnedTypeDatumConverter<double>::fromString("1600.");
double     VSOArrayParameters::sCanonicalCameraFPTransZ                 = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalCameraFPRotX                   = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalCameraFPRotY                   = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalCameraFPRotZ                   = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalCameraIP                       = VSReturnedTypeDatumConverter<double>::fromString("0.");
double     VSOArrayParameters::sCanonicalPixelSpacing                   = VSReturnedTypeDatumConverter<double>::fromString("5.0");
double     VSOArrayParameters::sCanonicalPixelConcSurvProb              = VSReturnedTypeDatumConverter<double>::fromString("1.0");
double     VSOArrayParameters::sCanonicalPixelDiameter                  = VSReturnedTypeDatumConverter<double>::fromString("5.0");
bool       VSOArrayParameters::sCanonicalPixelLabelingParity            = VSReturnedTypeDatumConverter<bool>::fromString("0");
std::string VSOArrayParameters::sCanonicalPixelMissingList               = VSReturnedTypeDatumConverter<std::string>::fromString("");

VSOArrayParameters::VSOArrayParameters(const VSOArrayParameters& o):
  ArrayLatitude(o.ArrayLatitude), ArrayLongitude(o.ArrayLongitude),
  ArrayAltitude(o.ArrayAltitude), ArrayNumTelRings(o.ArrayNumTelRings),
  ArrayTelSpacing(o.ArrayTelSpacing), ArrayLabelingParity(o.ArrayLabelingParity),
  ScopeMissingList(o.ScopeMissingList), ScopePosXYDisp(o.ScopePosXYDisp),
  ScopePosZDisp(o.ScopePosZDisp), ScopePosNorth(o.ScopePosNorth),
  ScopePosEast(o.ScopePosEast), ScopePosASL(o.ScopePosASL), ScopeDeltaY(o.ScopeDeltaY),
  ScopeAlphaX(o.ScopeAlphaX), ScopeAlphaY(o.ScopeAlphaY), ScopeElevation(o.ScopeElevation),
  ScopeAzimuth(o.ScopeAzimuth), ScopeTranslationX(o.ScopeTranslationX),
  ScopeTranslationY(o.ScopeTranslationY), ScopeTranslationZ(o.ScopeTranslationZ),
  ReflectorCurvR(o.ReflectorCurvR), ReflectorApert(o.ReflectorApert),
  ReflectorRot(o.ReflectorRot), ReflectorAlignMode(o.ReflectorAlignMode),
  ReflectorAlignObjectPlane(o.ReflectorAlignObjectPlane),
  ReflectorAlignImagePlane(o.ReflectorAlignImagePlane), ReflectorAlignPtX(o.ReflectorAlignPtX),
  ReflectorAlignPtY(o.ReflectorAlignPtY), ReflectorAlignPtZ(o.ReflectorAlignPtZ),
  ReflectorAlignPtXZDisp(o.ReflectorAlignPtXZDisp), ReflectorAlignPtYDisp(o.ReflectorAlignPtYDisp),
  ReflectorFPAlignTheta(o.ReflectorFPAlignTheta), ReflectorFPAlignPhi(o.ReflectorFPAlignPhi),
  ReflectorIP(o.ReflectorIP), ReflectorObscuration(o.ReflectorObscuration),
  MirrorFacetSpacing(o.MirrorFacetSpacing), MirrorFacetSize(o.MirrorFacetSize),
  MirrorFLength(o.MirrorFLength), MirrorFLengthDisp(o.MirrorFLengthDisp),
  MirrorSpotSizePhotonFraction(o.MirrorSpotSizePhotonFraction),
  MirrorSpotSize(o.MirrorSpotSize), MirrorSpotSizeDisp(o.MirrorSpotSizeDisp),
  MirrorDegradingFactor(o.MirrorDegradingFactor), MirrorAlignTangentDisp(o.MirrorAlignTangentDisp),
  MirrorPosTangentDisp(o.MirrorPosTangentDisp), MirrorPosNormalDisp(o.MirrorPosNormalDisp),
  MirrorLabelingParity(o.MirrorLabelingParity), MirrorMissingList(o.MirrorMissingList),
  CameraDiameter(o.CameraDiameter), CameraFPTransX(o.CameraFPTransX),
  CameraFPTransY(o.CameraFPTransY), CameraFPTransZ(o.CameraFPTransZ),
  CameraFPRotX(o.CameraFPRotX), CameraFPRotY(o.CameraFPRotY), CameraFPRotZ(o.CameraFPRotZ),
  CameraIP(o.CameraIP), PixelSpacing(o.PixelSpacing), PixelConcSurvProb(o.PixelConcSurvProb),
  PixelDiameter(o.PixelDiameter), PixelLabelingParity(o.PixelLabelingParity),
  PixelMissingList(o.PixelMissingList)
{
  // nothing to see here
}

VSOArrayParameters::VSOArrayParameters(bool use_canonical_values):
  ArrayLatitude(), ArrayLongitude(), ArrayAltitude(), ArrayNumTelRings(),
  ArrayTelSpacing(), ArrayLabelingParity(), ScopeMissingList(),
  ScopePosXYDisp(), ScopePosZDisp(), ScopePosNorth(), ScopePosEast(),
  ScopePosASL(), ScopeDeltaY(), ScopeAlphaX(), ScopeAlphaY(), ScopeElevation(),
  ScopeAzimuth(), ScopeTranslationX(), ScopeTranslationY(),
  ScopeTranslationZ(), ReflectorCurvR(), ReflectorApert(), ReflectorRot(),
  ReflectorAlignMode(), ReflectorAlignObjectPlane(),
  ReflectorAlignImagePlane(), ReflectorAlignPtX(), ReflectorAlignPtY(),
  ReflectorAlignPtZ(), ReflectorAlignPtXZDisp(), ReflectorAlignPtYDisp(),
  ReflectorFPAlignTheta(), ReflectorFPAlignPhi(), ReflectorIP(),
  ReflectorObscuration(), MirrorFacetSpacing(), MirrorFacetSize(),
  MirrorFLength(), MirrorFLengthDisp(), MirrorSpotSizePhotonFraction(),
  MirrorSpotSize(), MirrorSpotSizeDisp(), MirrorDegradingFactor(),
  MirrorAlignTangentDisp(), MirrorPosTangentDisp(), MirrorPosNormalDisp(),
  MirrorLabelingParity(), MirrorMissingList(), CameraDiameter(),
  CameraFPTransX(), CameraFPTransY(), CameraFPTransZ(), CameraFPRotX(),
  CameraFPRotY(), CameraFPRotZ(), CameraIP(), PixelSpacing(),
  PixelConcSurvProb(), PixelDiameter(), PixelLabelingParity(),
  PixelMissingList()
{
  if(use_canonical_values)
    {
      ArrayLatitude             = sCanonicalArrayLatitude;
      ArrayLongitude            = sCanonicalArrayLongitude;
      ArrayAltitude             = sCanonicalArrayAltitude;
      ArrayNumTelRings          = sCanonicalArrayNumTelRings;
      ArrayTelSpacing           = sCanonicalArrayTelSpacing;
      ArrayLabelingParity       = sCanonicalArrayLabelingParity;
      ScopeMissingList          = sCanonicalScopeMissingList;
      ScopePosXYDisp            = sCanonicalScopePosXYDisp;
      ScopePosZDisp             = sCanonicalScopePosZDisp;
      ScopePosNorth             = sCanonicalScopePosNorth;
      ScopePosEast              = sCanonicalScopePosEast;
      ScopePosASL               = sCanonicalScopePosASL;
      ScopeDeltaY               = sCanonicalScopeDeltaY;
      ScopeAlphaX               = sCanonicalScopeAlphaX;
      ScopeAlphaY               = sCanonicalScopeAlphaY;
      ScopeElevation            = sCanonicalScopeElevation;
      ScopeAzimuth              = sCanonicalScopeAzimuth;
      ScopeTranslationX         = sCanonicalScopeTranslationX;
      ScopeTranslationY         = sCanonicalScopeTranslationY;
      ScopeTranslationZ         = sCanonicalScopeTranslationZ;
      ReflectorCurvR            = sCanonicalReflectorCurvR;
      ReflectorApert            = sCanonicalReflectorApert;
      ReflectorRot              = sCanonicalReflectorRot;
      ReflectorAlignMode        = sCanonicalReflectorAlignMode;
      ReflectorAlignObjectPlane = sCanonicalReflectorAlignObjectPlane;
      ReflectorAlignImagePlane  = sCanonicalReflectorAlignImagePlane;
      ReflectorAlignPtX         = sCanonicalReflectorAlignPtX;
      ReflectorAlignPtY         = sCanonicalReflectorAlignPtY;
      ReflectorAlignPtZ         = sCanonicalReflectorAlignPtZ;
      ReflectorAlignPtXZDisp    = sCanonicalReflectorAlignPtXZDisp;
      ReflectorAlignPtYDisp     = sCanonicalReflectorAlignPtYDisp;
      ReflectorFPAlignTheta     = sCanonicalReflectorFPAlignTheta;
      ReflectorFPAlignPhi       = sCanonicalReflectorFPAlignPhi;
      ReflectorIP               = sCanonicalReflectorIP;
      ReflectorObscuration      = sCanonicalReflectorObscuration;
      MirrorFacetSpacing        = sCanonicalMirrorFacetSpacing;
      MirrorFacetSize           = sCanonicalMirrorFacetSize;
      MirrorFLength             = sCanonicalMirrorFLength;
      MirrorFLengthDisp         = sCanonicalMirrorFLengthDisp;
      MirrorSpotSizePhotonFraction = sCanonicalMirrorSpotSizePhotonFraction;
      MirrorSpotSize            = sCanonicalMirrorSpotSize;
      MirrorSpotSizeDisp        = sCanonicalMirrorSpotSizeDisp;
      MirrorDegradingFactor     = sCanonicalMirrorDegradingFactor;
      MirrorAlignTangentDisp    = sCanonicalMirrorAlignTangentDisp;
      MirrorPosTangentDisp      = sCanonicalMirrorPosTangentDisp;
      MirrorPosNormalDisp       = sCanonicalMirrorPosNormalDisp;
      MirrorLabelingParity      = sCanonicalMirrorLabelingParity;
      MirrorMissingList         = sCanonicalMirrorMissingList;
      CameraDiameter            = sCanonicalCameraDiameter;
      CameraFPTransX            = sCanonicalCameraFPTransX;
      CameraFPTransY            = sCanonicalCameraFPTransY;
      CameraFPTransZ            = sCanonicalCameraFPTransZ;
      CameraFPRotX              = sCanonicalCameraFPRotX;
      CameraFPRotY              = sCanonicalCameraFPRotY;
      CameraFPRotZ              = sCanonicalCameraFPRotZ;
      CameraIP                  = sCanonicalCameraIP;
      PixelSpacing              = sCanonicalPixelSpacing;
      PixelConcSurvProb         = sCanonicalPixelConcSurvProb;
      PixelDiameter             = sCanonicalPixelDiameter;
      PixelLabelingParity       = sCanonicalPixelLabelingParity;
      PixelMissingList          = sCanonicalPixelMissingList;
    }
}

VSOArrayParameters::~VSOArrayParameters()
{
  // nothing to see here
}

void VSOArrayParameters::dump(std::ostream& stream)
{
  stream << "ArrayLatitude             = " << ArrayLatitude << std::endl;
  stream << "ArrayLongitude            = " << ArrayLongitude << std::endl;
  stream << "ArrayAltitude             = " << ArrayAltitude << std::endl;
  stream << "ArrayNumTelRings          = " << ArrayNumTelRings << std::endl;
  stream << "ArrayTelSpacing           = " << ArrayTelSpacing << std::endl;
  stream << "ArrayLabelingParity       = " << ArrayLabelingParity << std::endl;
  stream << "ScopeMissingList          = " << ScopeMissingList << std::endl;
  stream << "ScopePosXYDisp            = " << ScopePosXYDisp << std::endl;
  stream << "ScopePosZDisp             = " << ScopePosZDisp << std::endl;
  stream << "ScopePosNorth             = " << ScopePosNorth << std::endl;
  stream << "ScopePosEast              = " << ScopePosEast << std::endl;
  stream << "ScopePosASL               = " << ScopePosASL << std::endl;
  stream << "ScopeDeltaY               = " << ScopeDeltaY << std::endl;
  stream << "ScopeAlphaX               = " << ScopeAlphaX << std::endl;
  stream << "ScopeAlphaY               = " << ScopeAlphaY << std::endl;
  stream << "ScopeElevation            = " << ScopeElevation << std::endl;
  stream << "ScopeAzimuth              = " << ScopeAzimuth << std::endl;
  stream << "ScopeTranslationX         = " << ScopeTranslationX << std::endl;
  stream << "ScopeTranslationY         = " << ScopeTranslationY << std::endl;
  stream << "ScopeTranslationZ         = " << ScopeTranslationZ << std::endl;
  stream << "ReflectorCurvR            = " << ReflectorCurvR << std::endl;
  stream << "ReflectorApert            = " << ReflectorApert << std::endl;
  stream << "ReflectorRot              = " << ReflectorRot << std::endl;
  stream << "ReflectorAlignMode        = " << ReflectorAlignMode << std::endl;
  stream << "ReflectorAlignObjectPlane = " << ReflectorAlignObjectPlane << std::endl;
  stream << "ReflectorAlignImagePlane  = " << ReflectorAlignImagePlane << std::endl;
  stream << "ReflectorAlignPtX         = " << ReflectorAlignPtX << std::endl;
  stream << "ReflectorAlignPtY         = " << ReflectorAlignPtY << std::endl;
  stream << "ReflectorAlignPtZ         = " << ReflectorAlignPtZ << std::endl;
  stream << "ReflectorAlignPtXZDisp    = " << ReflectorAlignPtXZDisp << std::endl;
  stream << "ReflectorAlignPtYDisp     = " << ReflectorAlignPtYDisp << std::endl;
  stream << "ReflectorFPAlignTheta     = " << ReflectorFPAlignTheta << std::endl;
  stream << "ReflectorFPAlignPhi       = " << ReflectorFPAlignPhi << std::endl;
  stream << "ReflectorIP               = " << ReflectorIP << std::endl;
  stream << "ReflectorObscuration      = " << ReflectorObscuration << std::endl;
  stream << "MirrorFacetSpacing        = " << MirrorFacetSpacing << std::endl;
  stream << "MirrorFacetSize           = " << MirrorFacetSize << std::endl;
  stream << "MirrorFLength             = " << MirrorFLength << std::endl;
  stream << "MirrorFLengthDisp         = " << MirrorFLengthDisp << std::endl;
  stream << "MirrorSpotSizePhotonFraction = " << MirrorSpotSizePhotonFraction << std::endl;
  stream << "MirrorSpotSize            = " << MirrorSpotSize << std::endl;
  stream << "MirrorSpotSizeDisp        = " << MirrorSpotSizeDisp << std::endl;
  stream << "MirrorDegradingFactor     = " << MirrorDegradingFactor << std::endl;
  stream << "MirrorAlignTangentDisp    = " << MirrorAlignTangentDisp << std::endl;
  stream << "MirrorPosTangentDisp      = " << MirrorPosTangentDisp << std::endl;
  stream << "MirrorPosNormalDisp       = " << MirrorPosNormalDisp << std::endl;
  stream << "MirrorLabelingParity      = " << MirrorLabelingParity << std::endl;
  stream << "MirrorMissingList         = " << MirrorMissingList << std::endl;
  stream << "CameraDiameter            = " << CameraDiameter << std::endl;
  stream << "CameraFPTransX            = " << CameraFPTransX << std::endl;
  stream << "CameraFPTransY            = " << CameraFPTransY << std::endl;
  stream << "CameraFPTransZ            = " << CameraFPTransZ << std::endl;
  stream << "CameraFPRotX              = " << CameraFPRotX << std::endl;
  stream << "CameraFPRotY              = " << CameraFPRotY << std::endl;
  stream << "CameraFPRotZ              = " << CameraFPRotZ << std::endl;
  stream << "CameraIP                  = " << CameraIP << std::endl;
  stream << "PixelSpacing              = " << PixelSpacing << std::endl;
  stream << "PixelConcSurvProb         = " << PixelConcSurvProb << std::endl;
  stream << "PixelDiameter             = " << PixelDiameter << std::endl;
  stream << "PixelLabelingParity       = " << PixelLabelingParity << std::endl;
  stream << "PixelMissingList          = " << PixelMissingList << std::endl;
}

void VSOArrayParameters::reset(bool use_canonical_values)
{
  if(use_canonical_values)
    {
      ArrayLatitude             = sCanonicalArrayLatitude;
      ArrayLongitude            = sCanonicalArrayLongitude;
      ArrayAltitude             = sCanonicalArrayAltitude;
      ArrayNumTelRings          = sCanonicalArrayNumTelRings;
      ArrayTelSpacing           = sCanonicalArrayTelSpacing;
      ArrayLabelingParity       = sCanonicalArrayLabelingParity;
      ScopeMissingList          = sCanonicalScopeMissingList;
      ScopePosXYDisp            = sCanonicalScopePosXYDisp;
      ScopePosZDisp             = sCanonicalScopePosZDisp;
      ScopePosNorth             = sCanonicalScopePosNorth;
      ScopePosEast              = sCanonicalScopePosEast;
      ScopePosASL               = sCanonicalScopePosASL;
      ScopeDeltaY               = sCanonicalScopeDeltaY;
      ScopeAlphaX               = sCanonicalScopeAlphaX;
      ScopeAlphaY               = sCanonicalScopeAlphaY;
      ScopeElevation            = sCanonicalScopeElevation;
      ScopeAzimuth              = sCanonicalScopeAzimuth;
      ScopeTranslationX         = sCanonicalScopeTranslationX;
      ScopeTranslationY         = sCanonicalScopeTranslationY;
      ScopeTranslationZ         = sCanonicalScopeTranslationZ;
      ReflectorCurvR            = sCanonicalReflectorCurvR;
      ReflectorApert            = sCanonicalReflectorApert;
      ReflectorRot              = sCanonicalReflectorRot;
      ReflectorAlignMode        = sCanonicalReflectorAlignMode;
      ReflectorAlignObjectPlane = sCanonicalReflectorAlignObjectPlane;
      ReflectorAlignImagePlane  = sCanonicalReflectorAlignImagePlane;
      ReflectorAlignPtX         = sCanonicalReflectorAlignPtX;
      ReflectorAlignPtY         = sCanonicalReflectorAlignPtY;
      ReflectorAlignPtZ         = sCanonicalReflectorAlignPtZ;
      ReflectorAlignPtXZDisp    = sCanonicalReflectorAlignPtXZDisp;
      ReflectorAlignPtYDisp     = sCanonicalReflectorAlignPtYDisp;
      ReflectorFPAlignTheta     = sCanonicalReflectorFPAlignTheta;
      ReflectorFPAlignPhi       = sCanonicalReflectorFPAlignPhi;
      ReflectorIP               = sCanonicalReflectorIP;
      ReflectorObscuration      = sCanonicalReflectorObscuration;
      MirrorFacetSpacing        = sCanonicalMirrorFacetSpacing;
      MirrorFacetSize           = sCanonicalMirrorFacetSize;
      MirrorFLength             = sCanonicalMirrorFLength;
      MirrorFLengthDisp         = sCanonicalMirrorFLengthDisp;
      MirrorSpotSizePhotonFraction = sCanonicalMirrorSpotSizePhotonFraction;
      MirrorSpotSize            = sCanonicalMirrorSpotSize;
      MirrorSpotSizeDisp        = sCanonicalMirrorSpotSizeDisp;
      MirrorDegradingFactor     = sCanonicalMirrorDegradingFactor;
      MirrorAlignTangentDisp    = sCanonicalMirrorAlignTangentDisp;
      MirrorPosTangentDisp      = sCanonicalMirrorPosTangentDisp;
      MirrorPosNormalDisp       = sCanonicalMirrorPosNormalDisp;
      MirrorLabelingParity      = sCanonicalMirrorLabelingParity;
      MirrorMissingList         = sCanonicalMirrorMissingList;
      CameraDiameter            = sCanonicalCameraDiameter;
      CameraFPTransX            = sCanonicalCameraFPTransX;
      CameraFPTransY            = sCanonicalCameraFPTransY;
      CameraFPTransZ            = sCanonicalCameraFPTransZ;
      CameraFPRotX              = sCanonicalCameraFPRotX;
      CameraFPRotY              = sCanonicalCameraFPRotY;
      CameraFPRotZ              = sCanonicalCameraFPRotZ;
      CameraIP                  = sCanonicalCameraIP;
      PixelSpacing              = sCanonicalPixelSpacing;
      PixelConcSurvProb         = sCanonicalPixelConcSurvProb;
      PixelDiameter             = sCanonicalPixelDiameter;
      PixelLabelingParity       = sCanonicalPixelLabelingParity;
      PixelMissingList          = sCanonicalPixelMissingList;
    }
  else
    {
      ArrayLatitude             = double();
      ArrayLongitude            = double();
      ArrayAltitude             = double();
      ArrayNumTelRings          = unsigned();
      ArrayTelSpacing           = double();
      ArrayLabelingParity       = bool();
      ScopeMissingList          = std::string();
      ScopePosXYDisp            = double();
      ScopePosZDisp             = double();
      ScopePosNorth             = std::string();
      ScopePosEast              = std::string();
      ScopePosASL               = std::string();
      ScopeDeltaY               = double();
      ScopeAlphaX               = double();
      ScopeAlphaY               = double();
      ScopeElevation            = double();
      ScopeAzimuth              = double();
      ScopeTranslationX         = double();
      ScopeTranslationY         = double();
      ScopeTranslationZ         = double();
      ReflectorCurvR            = double();
      ReflectorApert            = double();
      ReflectorRot              = double();
      ReflectorAlignMode        = unsigned();
      ReflectorAlignObjectPlane = double();
      ReflectorAlignImagePlane  = double();
      ReflectorAlignPtX         = double();
      ReflectorAlignPtY         = double();
      ReflectorAlignPtZ         = double();
      ReflectorAlignPtXZDisp    = double();
      ReflectorAlignPtYDisp     = double();
      ReflectorFPAlignTheta     = double();
      ReflectorFPAlignPhi       = double();
      ReflectorIP               = double();
      ReflectorObscuration      = std::string();
      MirrorFacetSpacing        = double();
      MirrorFacetSize           = double();
      MirrorFLength             = double();
      MirrorFLengthDisp         = double();
      MirrorSpotSizePhotonFraction = double();
      MirrorSpotSize            = double();
      MirrorSpotSizeDisp        = double();
      MirrorDegradingFactor     = double();
      MirrorAlignTangentDisp    = double();
      MirrorPosTangentDisp      = double();
      MirrorPosNormalDisp       = double();
      MirrorLabelingParity      = bool();
      MirrorMissingList         = std::string();
      CameraDiameter            = double();
      CameraFPTransX            = double();
      CameraFPTransY            = double();
      CameraFPTransZ            = double();
      CameraFPRotX              = double();
      CameraFPRotY              = double();
      CameraFPRotZ              = double();
      CameraIP                  = double();
      PixelSpacing              = double();
      PixelConcSurvProb         = double();
      PixelDiameter             = double();
      PixelLabelingParity       = bool();
      PixelMissingList          = std::string();
    }
}

static const char* array_ini_comment[] = {
  "******************************************************************************\n********************************* ARRAY DATA *********************************\n******************************************************************************\n  Global reference frame is defined as\n  +x-axis (East), +y-axis (North), +z-axis (Up)\n  Latitude of array center - N:00d00.000\n@ ArrayLatitude [rad] <double>",
  "  Longitude of array center - E:00d00.000\n@ ArrayLongitude [rad] <double>",
  "  Altitude of array ASL\n@ ArrayAltitude [cm] <double>",
  "  Number of hexagonal rings of telescopes in an array:\n  The number of telescopes in an array is then 3*N*N+3*N+1\n@ ArrayNumTelRings [] <unsigned>",
  "  Spacing between telescopes in an array. From this parameter positions\n  of telescopes are calculated on the hexagonal grid. Position of telescope\n  is defined as point of intersection of its rotation axes.\n@ ArrayTelSpacing [cm] <double>",
  "  Telescopes are counted on a hex. grid in the direction of the +x-axis\n  when this flag is 0, and in the direction of the -x-axis when it is 1\n@ ArrayLabelingParity [] <bool>",
  "  Comma separated list of the Hex IDs of the scopes missing from the\n  array. If none are missing this should be set to an empty string\n@ ScopeMissingList [] <std::string>",
  "  Dispersion in the positioning of telescopes - X, Y\n@ ScopePosXYDisp [cm] <double>",
  "  Dispersion in the positioning of telescopes - Z\n@ ScopePosZDisp [cm] <double>",
  "  Coordinate of each scope relative to array center along north-south\n  axis (north is +).\n@ ScopePosNorth [cm] <std::string>",
  "  Coordinate of each scope relative to array center along east-west\n  axis (east is +).\n@ ScopePosEast [cm] <std::string>",
  "  Elevation of each scope relative to array center.\n@ ScopePosASL [cm] <std::string>",
  "******************************************************************************\n******************************* TELESCOPE DATA *******************************\n******************************************************************************\n  Angle between rotation planes (deviation from perpendicularity of the\n  z and x axes )\n  Rotation around y-axis of elevation plane\n@ ScopeDeltaY [rad] <double>",
  "  Deviation of z-axis from vertical\n@ ScopeAlphaX [rad] <double>",
  "  Deviation of z-axis from vertical\n@ ScopeAlphaY [rad] <double>",
  "  Elevation of telescope figured from y-axis toward z-axis\n  Home position of telescope is at elevation = 0\n@ ScopeElevation [rad] <double>",
  "  Counted from +y-axis toward +x-axis\n  Home position of telescope is at azimuth = 0 (North)\n@ ScopeAzimuth [rad] <double>",
  "  Vector to intersection of rotation axes from the center of\n  reflector in reflector reference frame (+y points along optical axis,\n  +z is up, and +x points East when telescope is in Home position,\n  the origin is in the center of the reflector).\n@ ScopeTranslationX [cm] <double>",
  "@ ScopeTranslationY [cm] <double>",
  "@ ScopeTranslationZ [cm] <double>",
  "******************************************************************************\n******************************* REFLECTOR DATA *******************************\n******************************************************************************\n  Radius of curvature of the reflector\n@ ReflectorCurvR [cm] <double>",
  "  Telescope aperture (diameter of reflector)\n@ ReflectorApert [cm] <double>",
  "  Reflector rotation about the optical axis\n@ ReflectorRot [rad] <double>",
  "  Alignment Mode - Mode 0 indicates that conventional DC alignment to a fixed\n  alignment point should be used. In this mode the reflector alignment point\n  is defined by ReflectorAlignPtX,Y,Z. This mode should (generally) only be\n  used for standard DC designs (but see the comment for ReflectorAlignPtY).\n  Mode 1 indicates that the reflector should be aligned to minimize the PSF\n  at a point in the focal plane defined by ReflectorFPAlignTheta,Phi. This is\n  analagous to the method of alignment using an active alignment system.\n@ ReflectorAlignMode [] <unsigned>",
  "  Alignment object plane to be used in alignment mode 1. A value of\n  zero or inf implies the telescope should be focussed for objects at\n  infinity.\n@ ReflectorAlignObjectPlane [cm] <double>",
  "  Alignment image plane to be used in alignment mode 1 (or mode 0 if\n  ReflectorAlignPtY is zero). A value of zero implies the telescope\n  should be focussed such that the image appears on the camera plane.\n@ ReflectorAlignImagePlane [cm] <double>",
  "  Alignment Point X in reflector r.f.\n@ ReflectorAlignPtX [cm] <double>",
  "  Alignment Point Y in reflector r.f. A value of zero indicates that the\n  alignment point should be calculated for each facet, which alows this method\n  to be used for modified DC designs.\n@ ReflectorAlignPtY [cm] <double>",
  "  Alignment Point Z in reflector r.f.\n@ ReflectorAlignPtZ [cm] <double>",
  "  Dispersion of alignment point in XZ direction\n@ ReflectorAlignPtXZDisp [cm] <double>",
  "  Dispersion of alignment point in Y direction\n@ ReflectorAlignPtYDisp [cm] <double>",
  "  Focal plane alignment point from center of FoV\n@ ReflectorFPAlignTheta [rad] <double>",
  "  Focal plane alignment point polar angle\n@ ReflectorFPAlignPhi [rad] <double>",
  "  The diameter of a sphere embedding reflector. This parameter is used to\n  check if photon hits reflector before actual ray tracing. THIS PARAMETER IS\n  NOT USED THIS WAY IN THE CURRENT VERSION. It *is* used by the test beam\n  generator. It can safely be set to zero as it is automatically increased\n  if necessary as mirrors are added.\n@ ReflectorIP [cm] <double>",
  "  A set of objects which can obscure photons on way to and\n  (optionally) from the reflector. The format is a comma-separated\n  list of object definitions, as follows:\n  TUBE(x1,y1,z1,x2,y2,z2,r,incoming_only) - tube between two points\n  DISK(xc,yc,zc,nx,ny,nz,r,incoming_only) - disk with given center and normal\n@ ReflectorObscuration [] <std::string>",
  "******************************************************************************\n******************************** MIRROR DATA *********************************\n******************************************************************************\n  Facet spacing, center to center distance beteen mirror sites on reflector\n@ MirrorFacetSpacing [cm] <double>",
  "  Facet size of a single mirror of the reflector\n  It does not make sense to have MirrorFacetSize > MirrorFacetSpacing\n@ MirrorFacetSize [cm] <double>",
  "  Focal length of a mirror\n@ MirrorFLength [cm] <double>",
  "  Dispersion of focal length\n@ MirrorFLengthDisp [cm] <double>",
  "  Mean fraction of photons contained by a circle with diameter given by\n  the spotsize parameter below. This parameter essentially defines what\n  the MirrorSpotSize and MirrorSpotSizeDisp parameters mean. Some typical\n  values are given here:\n  0.39 -- Spotsize is DIAMETER of 1-sigma of distribution  (2 x 1.00 sigma)\n  0.50 -- Spotsize is FWHM                                 (2 x 1.77 sigma)\n  0.67 -- Spotsize DIAMETER contains 2/3 of the photons    (2 x 1.48 sigma)\n  0.85 -- Spotsize DIAMETER contains 85% of the photons    (2 x 1.95 sigma)\n  0.90 -- Spotsize DIAMETER contains 90% of the photons    (2 x 2.15 sigma)\n@ MirrorSpotSizePhotonFraction [] <double>",
  "  Mean spot size (diameter) at the focal distance of the mirror from a\n  parallel beam of light. This parameter defines the mean DIAMETER of a\n  circle which contains MirrorSpotSizePhotonFraction of the photons\n  on a screen at its focal length.\n@ MirrorSpotSize [cm] <double>",
  "  Dispersion of spot size (diameter) in the focal plane from a parallel\n  beam of light\n@ MirrorSpotSizeDisp [cm] <double>",
  "  Mirror reflection degrading factor (wavelength indep.)\n@ MirrorDegradingFactor [] <double>",
  "  Dispersion in alignment of mirrors. Each mirror is aligned to telescope\n  alignment point with tangential error which results in the alignment\n  vector missing the alignment point by an amount given by this parameter\n@ MirrorAlignTangentDisp [cm] <double>",
  "  Dispersion in mirror positioning on reflector - tangential to surface\n@ MirrorPosTangentDisp [cm] <double>",
  "  Dispersion in mirror positioning on reflector - normal to surface\n@ MirrorPosNormalDisp [cm] <double>",
  "  Mirrors are counted (on the hex. grid) in the direction of the +x-axis (east)\n  when this flag is 0, and in the direction of the -x-axis (west)\n  when this flag is 1 (in the reflector r.f. -- home position of telescope )\n@ MirrorLabelingParity [] <bool>",
  "  Comma separated list of the Hex IDs of the mirrors missing from each\n  telescope. If none are missing this should be set to an empty string\n@ MirrorMissingList [] <std::string>",
  "******************************************************************************\n******************************** CAMERA DATA *********************************\n******************************************************************************\n  Camera diameter on the focal plane\n@ CameraDiameter [cm] <double>",
  "  Focal plane position X in the reflector r.f.\n@ CameraFPTransX [cm] <double>",
  "  Focal plane position Y in the reflector r.f.\n@ CameraFPTransY [cm] <double>",
  "  Focal plane position Z in the reflector r.f.\n@ CameraFPTransZ [cm] <double>",
  "  Ideally, the focal plane is in the x-z plane in the reflector r.f..\n  However it can be rotated with respect to reflector r.f. Parameters\n  of such rotation are defined below\n  Focal plane rotation around x-axis in reflector r.f.\n@ CameraFPRotX [rad] <double>",
  "  Focal plane rotation around y-axis in reflector r.f.\n@ CameraFPRotY [rad] <double>",
  "  Focal plane rotation around z-axis in reflector r.f.\n@ CameraFPRotZ [rad] <double>",
  "  The diameter of a sphere embedding camera. This parameter is used to check\n  if photon hits camera. Camera impact parameter (same as above). THIS\n  PARAMETER IS NOT USED IN THE CURRENT VERSION.\n@ CameraIP [cm] <double>",
  "******************************************************************************\n********************************* PIXEL DATA *********************************\n******************************************************************************\n  Spacing between camera pixels\n@ PixelSpacing [cm] <double>",
  "  Survival probability of photon when it hits light concentrator\n@ PixelConcSurvProb [] <double>",
  "  Photocathode diameter\n@ PixelDiameter [cm] <double>",
  "  Pixels are counted (on the hex. grid) in the direction of the +x-axis\n  when this flag is 0, and in the direction of the -x-axis\n  when this flag is 1 in the camera r.f.\n@ PixelLabelingParity [] <bool>",
  "  Comma separated list of the Hex IDs of the pixels missing from each\n  telescope. If none are missing this should be set to an empty string\n@ PixelMissingList [] <std::string>"
};

#define NARRAYINIITEMS (sizeof(array_ini_comment)/sizeof(*array_ini_comment))

void VSOArrayParameters::zeroCanonicalValues()
{
  sCanonicalArrayLatitude             = double();
  sCanonicalArrayLongitude            = double();
  sCanonicalArrayAltitude             = double();
  sCanonicalArrayNumTelRings          = unsigned();
  sCanonicalArrayTelSpacing           = double();
  sCanonicalArrayLabelingParity       = bool();
  sCanonicalScopeMissingList          = std::string();
  sCanonicalScopePosXYDisp            = double();
  sCanonicalScopePosZDisp             = double();
  sCanonicalScopePosNorth             = std::string();
  sCanonicalScopePosEast              = std::string();
  sCanonicalScopePosASL               = std::string();
  sCanonicalScopeDeltaY               = double();
  sCanonicalScopeAlphaX               = double();
  sCanonicalScopeAlphaY               = double();
  sCanonicalScopeElevation            = double();
  sCanonicalScopeAzimuth              = double();
  sCanonicalScopeTranslationX         = double();
  sCanonicalScopeTranslationY         = double();
  sCanonicalScopeTranslationZ         = double();
  sCanonicalReflectorCurvR            = double();
  sCanonicalReflectorApert            = double();
  sCanonicalReflectorRot              = double();
  sCanonicalReflectorAlignMode        = unsigned();
  sCanonicalReflectorAlignObjectPlane = double();
  sCanonicalReflectorAlignImagePlane  = double();
  sCanonicalReflectorAlignPtX         = double();
  sCanonicalReflectorAlignPtY         = double();
  sCanonicalReflectorAlignPtZ         = double();
  sCanonicalReflectorAlignPtXZDisp    = double();
  sCanonicalReflectorAlignPtYDisp     = double();
  sCanonicalReflectorFPAlignTheta     = double();
  sCanonicalReflectorFPAlignPhi       = double();
  sCanonicalReflectorIP               = double();
  sCanonicalReflectorObscuration      = std::string();
  sCanonicalMirrorFacetSpacing        = double();
  sCanonicalMirrorFacetSize           = double();
  sCanonicalMirrorFLength             = double();
  sCanonicalMirrorFLengthDisp         = double();
  sCanonicalMirrorSpotSizePhotonFraction = double();
  sCanonicalMirrorSpotSize            = double();
  sCanonicalMirrorSpotSizeDisp        = double();
  sCanonicalMirrorDegradingFactor     = double();
  sCanonicalMirrorAlignTangentDisp    = double();
  sCanonicalMirrorPosTangentDisp      = double();
  sCanonicalMirrorPosNormalDisp       = double();
  sCanonicalMirrorLabelingParity      = bool();
  sCanonicalMirrorMissingList         = std::string();
  sCanonicalCameraDiameter            = double();
  sCanonicalCameraFPTransX            = double();
  sCanonicalCameraFPTransY            = double();
  sCanonicalCameraFPTransZ            = double();
  sCanonicalCameraFPRotX              = double();
  sCanonicalCameraFPRotY              = double();
  sCanonicalCameraFPRotZ              = double();
  sCanonicalCameraIP                  = double();
  sCanonicalPixelSpacing              = double();
  sCanonicalPixelConcSurvProb         = double();
  sCanonicalPixelDiameter             = double();
  sCanonicalPixelLabelingParity       = bool();
  sCanonicalPixelMissingList          = std::string();
}

void VSOArrayParameters::resetCanonicalValues()
{
  sCanonicalArrayLatitude             = VSReturnedTypeDatumConverter<double>::fromString("0.0000000");
  sCanonicalArrayLongitude            = VSReturnedTypeDatumConverter<double>::fromString("0.0000000");
  sCanonicalArrayAltitude             = VSReturnedTypeDatumConverter<double>::fromString("0");
  sCanonicalArrayNumTelRings          = VSReturnedTypeDatumConverter<unsigned>::fromString("0");
  sCanonicalArrayTelSpacing           = VSReturnedTypeDatumConverter<double>::fromString("10000.");
  sCanonicalArrayLabelingParity       = VSReturnedTypeDatumConverter<bool>::fromString("0");
  sCanonicalScopeMissingList          = VSReturnedTypeDatumConverter<std::string>::fromString("");
  sCanonicalScopePosXYDisp            = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalScopePosZDisp             = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalScopePosNorth             = VSReturnedTypeDatumConverter<std::string>::fromString("");
  sCanonicalScopePosEast              = VSReturnedTypeDatumConverter<std::string>::fromString("");
  sCanonicalScopePosASL               = VSReturnedTypeDatumConverter<std::string>::fromString("");
  sCanonicalScopeDeltaY               = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalScopeAlphaX               = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalScopeAlphaY               = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalScopeElevation            = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalScopeAzimuth              = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalScopeTranslationX         = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalScopeTranslationY         = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalScopeTranslationZ         = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalReflectorCurvR            = VSReturnedTypeDatumConverter<double>::fromString("1920.");
  sCanonicalReflectorApert            = VSReturnedTypeDatumConverter<double>::fromString("1230.");
  sCanonicalReflectorRot              = VSReturnedTypeDatumConverter<double>::fromString("1.5707963267948966");
  sCanonicalReflectorAlignMode        = VSReturnedTypeDatumConverter<unsigned>::fromString("1");
  sCanonicalReflectorAlignObjectPlane = VSReturnedTypeDatumConverter<double>::fromString("inf");
  sCanonicalReflectorAlignImagePlane  = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalReflectorAlignPtX         = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalReflectorAlignPtY         = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalReflectorAlignPtZ         = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalReflectorAlignPtXZDisp    = VSReturnedTypeDatumConverter<double>::fromString("0");
  sCanonicalReflectorAlignPtYDisp     = VSReturnedTypeDatumConverter<double>::fromString("0");
  sCanonicalReflectorFPAlignTheta     = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalReflectorFPAlignPhi       = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalReflectorIP               = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalReflectorObscuration      = VSReturnedTypeDatumConverter<std::string>::fromString("DISK(0.0,1600.0,0.0,0.0,1.0,0.0,137.5,true),TUBE(0.0,1600.0,0.0,0.0,1770.0,0.0,137.5,true),TUBE(300.0,121.0,600.0,127.0,1685.0,52.6,8.5,true),TUBE(-300.0,121.0,600.0,-127.0,1685.0,52.6,8.5,true),TUBE(300.0,121.0,-600.0,127.0,1685.0,-52.6,8.5,true),TUBE(-300.0,121.0,-600.0,-127.0,1685.0,-52.6,8.5,true),TUBE(181.7,1191.1,225.5,127.0,1685.0,-52.6,7.0,true),TUBE(-181.7,1191.1,225.5,-127.0,1685.0,-52.6,7.0,true),TUBE(181.7,1191.1,225.5,300.0,121.0,-600.0,7.0,true),TUBE(-181.7,1191.1,225.5,-300.0,121.0,-600.0,7.0,true)");
  sCanonicalMirrorFacetSpacing        = VSReturnedTypeDatumConverter<double>::fromString("122.");
  sCanonicalMirrorFacetSize           = VSReturnedTypeDatumConverter<double>::fromString("120.");
  sCanonicalMirrorFLength             = VSReturnedTypeDatumConverter<double>::fromString("1607.");
  sCanonicalMirrorFLengthDisp         = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalMirrorSpotSizePhotonFraction = VSReturnedTypeDatumConverter<double>::fromString("0.80");
  sCanonicalMirrorSpotSize            = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalMirrorSpotSizeDisp        = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalMirrorDegradingFactor     = VSReturnedTypeDatumConverter<double>::fromString("1.0");
  sCanonicalMirrorAlignTangentDisp    = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalMirrorPosTangentDisp      = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalMirrorPosNormalDisp       = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalMirrorLabelingParity      = VSReturnedTypeDatumConverter<bool>::fromString("0");
  sCanonicalMirrorMissingList         = VSReturnedTypeDatumConverter<std::string>::fromString("1,62,67,72,77,82,87");
  sCanonicalCameraDiameter            = VSReturnedTypeDatumConverter<double>::fromString("235.");
  sCanonicalCameraFPTransX            = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalCameraFPTransY            = VSReturnedTypeDatumConverter<double>::fromString("1600.");
  sCanonicalCameraFPTransZ            = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalCameraFPRotX              = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalCameraFPRotY              = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalCameraFPRotZ              = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalCameraIP                  = VSReturnedTypeDatumConverter<double>::fromString("0.");
  sCanonicalPixelSpacing              = VSReturnedTypeDatumConverter<double>::fromString("5.0");
  sCanonicalPixelConcSurvProb         = VSReturnedTypeDatumConverter<double>::fromString("1.0");
  sCanonicalPixelDiameter             = VSReturnedTypeDatumConverter<double>::fromString("5.0");
  sCanonicalPixelLabelingParity       = VSReturnedTypeDatumConverter<bool>::fromString("0");
  sCanonicalPixelMissingList          = VSReturnedTypeDatumConverter<std::string>::fromString("");
}

void VSOArrayParameters::setCanonicalValuesFromArrayParameters(const VSOArrayParameters& o)
{
  sCanonicalArrayLatitude             = o.ArrayLatitude;
  sCanonicalArrayLongitude            = o.ArrayLongitude;
  sCanonicalArrayAltitude             = o.ArrayAltitude;
  sCanonicalArrayNumTelRings          = o.ArrayNumTelRings;
  sCanonicalArrayTelSpacing           = o.ArrayTelSpacing;
  sCanonicalArrayLabelingParity       = o.ArrayLabelingParity;
  sCanonicalScopeMissingList          = o.ScopeMissingList;
  sCanonicalScopePosXYDisp            = o.ScopePosXYDisp;
  sCanonicalScopePosZDisp             = o.ScopePosZDisp;
  sCanonicalScopePosNorth             = o.ScopePosNorth;
  sCanonicalScopePosEast              = o.ScopePosEast;
  sCanonicalScopePosASL               = o.ScopePosASL;
  sCanonicalScopeDeltaY               = o.ScopeDeltaY;
  sCanonicalScopeAlphaX               = o.ScopeAlphaX;
  sCanonicalScopeAlphaY               = o.ScopeAlphaY;
  sCanonicalScopeElevation            = o.ScopeElevation;
  sCanonicalScopeAzimuth              = o.ScopeAzimuth;
  sCanonicalScopeTranslationX         = o.ScopeTranslationX;
  sCanonicalScopeTranslationY         = o.ScopeTranslationY;
  sCanonicalScopeTranslationZ         = o.ScopeTranslationZ;
  sCanonicalReflectorCurvR            = o.ReflectorCurvR;
  sCanonicalReflectorApert            = o.ReflectorApert;
  sCanonicalReflectorRot              = o.ReflectorRot;
  sCanonicalReflectorAlignMode        = o.ReflectorAlignMode;
  sCanonicalReflectorAlignObjectPlane = o.ReflectorAlignObjectPlane;
  sCanonicalReflectorAlignImagePlane  = o.ReflectorAlignImagePlane;
  sCanonicalReflectorAlignPtX         = o.ReflectorAlignPtX;
  sCanonicalReflectorAlignPtY         = o.ReflectorAlignPtY;
  sCanonicalReflectorAlignPtZ         = o.ReflectorAlignPtZ;
  sCanonicalReflectorAlignPtXZDisp    = o.ReflectorAlignPtXZDisp;
  sCanonicalReflectorAlignPtYDisp     = o.ReflectorAlignPtYDisp;
  sCanonicalReflectorFPAlignTheta     = o.ReflectorFPAlignTheta;
  sCanonicalReflectorFPAlignPhi       = o.ReflectorFPAlignPhi;
  sCanonicalReflectorIP               = o.ReflectorIP;
  sCanonicalReflectorObscuration      = o.ReflectorObscuration;
  sCanonicalMirrorFacetSpacing        = o.MirrorFacetSpacing;
  sCanonicalMirrorFacetSize           = o.MirrorFacetSize;
  sCanonicalMirrorFLength             = o.MirrorFLength;
  sCanonicalMirrorFLengthDisp         = o.MirrorFLengthDisp;
  sCanonicalMirrorSpotSizePhotonFraction = o.MirrorSpotSizePhotonFraction;
  sCanonicalMirrorSpotSize            = o.MirrorSpotSize;
  sCanonicalMirrorSpotSizeDisp        = o.MirrorSpotSizeDisp;
  sCanonicalMirrorDegradingFactor     = o.MirrorDegradingFactor;
  sCanonicalMirrorAlignTangentDisp    = o.MirrorAlignTangentDisp;
  sCanonicalMirrorPosTangentDisp      = o.MirrorPosTangentDisp;
  sCanonicalMirrorPosNormalDisp       = o.MirrorPosNormalDisp;
  sCanonicalMirrorLabelingParity      = o.MirrorLabelingParity;
  sCanonicalMirrorMissingList         = o.MirrorMissingList;
  sCanonicalCameraDiameter            = o.CameraDiameter;
  sCanonicalCameraFPTransX            = o.CameraFPTransX;
  sCanonicalCameraFPTransY            = o.CameraFPTransY;
  sCanonicalCameraFPTransZ            = o.CameraFPTransZ;
  sCanonicalCameraFPRotX              = o.CameraFPRotX;
  sCanonicalCameraFPRotY              = o.CameraFPRotY;
  sCanonicalCameraFPRotZ              = o.CameraFPRotZ;
  sCanonicalCameraIP                  = o.CameraIP;
  sCanonicalPixelSpacing              = o.PixelSpacing;
  sCanonicalPixelConcSurvProb         = o.PixelConcSurvProb;
  sCanonicalPixelDiameter             = o.PixelDiameter;
  sCanonicalPixelLabelingParity       = o.PixelLabelingParity;
  sCanonicalPixelMissingList          = o.PixelMissingList;
}

bool VSOArrayParameters::
readFromArrayINIFile(const std::string& filename)
{
  std::ifstream stream(filename.c_str());
  if(stream)return readFromArrayINIFile(stream);
  else return false;
}

bool VSOArrayParameters::
readFromArrayINIFile(std::istream& stream)
{
  VSLineTokenizer tokenizer;

  std::vector<VSToken> parameters;
  while(!stream.eof())
    {
      VSTokenList tokens;
      tokenizer.tokenize(stream,tokens);

      if((tokens.size()!=0)&&(tokens[0].string().size()>0)&&
         (tokens[0].string().at(0)=='@'))
	{
          tokenizer.tokenize(stream,tokens);
          if(tokens.size() != 0)parameters.push_back(tokens[0]);
	}
    }

  if(parameters.size() != NARRAYINIITEMS)return false;

  unsigned p=0;
  bool good = true;

  good &= parameters[p++].convertTo(ArrayLatitude);
  good &= parameters[p++].convertTo(ArrayLongitude);
  good &= parameters[p++].convertTo(ArrayAltitude);
  good &= parameters[p++].convertTo(ArrayNumTelRings);
  good &= parameters[p++].convertTo(ArrayTelSpacing);
  good &= parameters[p++].convertTo(ArrayLabelingParity);
  good &= parameters[p++].convertTo(ScopeMissingList);
  good &= parameters[p++].convertTo(ScopePosXYDisp);
  good &= parameters[p++].convertTo(ScopePosZDisp);
  good &= parameters[p++].convertTo(ScopePosNorth);
  good &= parameters[p++].convertTo(ScopePosEast);
  good &= parameters[p++].convertTo(ScopePosASL);
  good &= parameters[p++].convertTo(ScopeDeltaY);
  good &= parameters[p++].convertTo(ScopeAlphaX);
  good &= parameters[p++].convertTo(ScopeAlphaY);
  good &= parameters[p++].convertTo(ScopeElevation);
  good &= parameters[p++].convertTo(ScopeAzimuth);
  good &= parameters[p++].convertTo(ScopeTranslationX);
  good &= parameters[p++].convertTo(ScopeTranslationY);
  good &= parameters[p++].convertTo(ScopeTranslationZ);
  good &= parameters[p++].convertTo(ReflectorCurvR);
  good &= parameters[p++].convertTo(ReflectorApert);
  good &= parameters[p++].convertTo(ReflectorRot);
  good &= parameters[p++].convertTo(ReflectorAlignMode);
  good &= parameters[p++].convertTo(ReflectorAlignObjectPlane);
  good &= parameters[p++].convertTo(ReflectorAlignImagePlane);
  good &= parameters[p++].convertTo(ReflectorAlignPtX);
  good &= parameters[p++].convertTo(ReflectorAlignPtY);
  good &= parameters[p++].convertTo(ReflectorAlignPtZ);
  good &= parameters[p++].convertTo(ReflectorAlignPtXZDisp);
  good &= parameters[p++].convertTo(ReflectorAlignPtYDisp);
  good &= parameters[p++].convertTo(ReflectorFPAlignTheta);
  good &= parameters[p++].convertTo(ReflectorFPAlignPhi);
  good &= parameters[p++].convertTo(ReflectorIP);
  good &= parameters[p++].convertTo(ReflectorObscuration);
  good &= parameters[p++].convertTo(MirrorFacetSpacing);
  good &= parameters[p++].convertTo(MirrorFacetSize);
  good &= parameters[p++].convertTo(MirrorFLength);
  good &= parameters[p++].convertTo(MirrorFLengthDisp);
  good &= parameters[p++].convertTo(MirrorSpotSizePhotonFraction);
  good &= parameters[p++].convertTo(MirrorSpotSize);
  good &= parameters[p++].convertTo(MirrorSpotSizeDisp);
  good &= parameters[p++].convertTo(MirrorDegradingFactor);
  good &= parameters[p++].convertTo(MirrorAlignTangentDisp);
  good &= parameters[p++].convertTo(MirrorPosTangentDisp);
  good &= parameters[p++].convertTo(MirrorPosNormalDisp);
  good &= parameters[p++].convertTo(MirrorLabelingParity);
  good &= parameters[p++].convertTo(MirrorMissingList);
  good &= parameters[p++].convertTo(CameraDiameter);
  good &= parameters[p++].convertTo(CameraFPTransX);
  good &= parameters[p++].convertTo(CameraFPTransY);
  good &= parameters[p++].convertTo(CameraFPTransZ);
  good &= parameters[p++].convertTo(CameraFPRotX);
  good &= parameters[p++].convertTo(CameraFPRotY);
  good &= parameters[p++].convertTo(CameraFPRotZ);
  good &= parameters[p++].convertTo(CameraIP);
  good &= parameters[p++].convertTo(PixelSpacing);
  good &= parameters[p++].convertTo(PixelConcSurvProb);
  good &= parameters[p++].convertTo(PixelDiameter);
  good &= parameters[p++].convertTo(PixelLabelingParity);
  good &= parameters[p++].convertTo(PixelMissingList);

  return((p==NARRAYINIITEMS)&&(good));
}

void VSOArrayParameters::
writeToArrayINIFile(const std::string& filename) const
{
  std::ofstream stream(filename.c_str());
  writeToArrayINIFile(stream);
}

void VSOArrayParameters::
writeToArrayINIFile(std::ostream& stream) const
{
  std::vector<std::string> parameters;

  parameters.push_back(VSDataConverter::toString(ArrayLatitude));
  parameters.push_back(VSDataConverter::toString(ArrayLongitude));
  parameters.push_back(VSDataConverter::toString(ArrayAltitude));
  parameters.push_back(VSDataConverter::toString(ArrayNumTelRings));
  parameters.push_back(VSDataConverter::toString(ArrayTelSpacing));
  parameters.push_back(VSDataConverter::toString(ArrayLabelingParity));
  parameters.push_back(VSDataConverter::toString(ScopeMissingList));
  parameters.push_back(VSDataConverter::toString(ScopePosXYDisp));
  parameters.push_back(VSDataConverter::toString(ScopePosZDisp));
  parameters.push_back(VSDataConverter::toString(ScopePosNorth));
  parameters.push_back(VSDataConverter::toString(ScopePosEast));
  parameters.push_back(VSDataConverter::toString(ScopePosASL));
  parameters.push_back(VSDataConverter::toString(ScopeDeltaY));
  parameters.push_back(VSDataConverter::toString(ScopeAlphaX));
  parameters.push_back(VSDataConverter::toString(ScopeAlphaY));
  parameters.push_back(VSDataConverter::toString(ScopeElevation));
  parameters.push_back(VSDataConverter::toString(ScopeAzimuth));
  parameters.push_back(VSDataConverter::toString(ScopeTranslationX));
  parameters.push_back(VSDataConverter::toString(ScopeTranslationY));
  parameters.push_back(VSDataConverter::toString(ScopeTranslationZ));
  parameters.push_back(VSDataConverter::toString(ReflectorCurvR));
  parameters.push_back(VSDataConverter::toString(ReflectorApert));
  parameters.push_back(VSDataConverter::toString(ReflectorRot));
  parameters.push_back(VSDataConverter::toString(ReflectorAlignMode));
  parameters.push_back(VSDataConverter::toString(ReflectorAlignObjectPlane));
  parameters.push_back(VSDataConverter::toString(ReflectorAlignImagePlane));
  parameters.push_back(VSDataConverter::toString(ReflectorAlignPtX));
  parameters.push_back(VSDataConverter::toString(ReflectorAlignPtY));
  parameters.push_back(VSDataConverter::toString(ReflectorAlignPtZ));
  parameters.push_back(VSDataConverter::toString(ReflectorAlignPtXZDisp));
  parameters.push_back(VSDataConverter::toString(ReflectorAlignPtYDisp));
  parameters.push_back(VSDataConverter::toString(ReflectorFPAlignTheta));
  parameters.push_back(VSDataConverter::toString(ReflectorFPAlignPhi));
  parameters.push_back(VSDataConverter::toString(ReflectorIP));
  parameters.push_back(VSDataConverter::toString(ReflectorObscuration));
  parameters.push_back(VSDataConverter::toString(MirrorFacetSpacing));
  parameters.push_back(VSDataConverter::toString(MirrorFacetSize));
  parameters.push_back(VSDataConverter::toString(MirrorFLength));
  parameters.push_back(VSDataConverter::toString(MirrorFLengthDisp));
  parameters.push_back(VSDataConverter::toString(MirrorSpotSizePhotonFraction));
  parameters.push_back(VSDataConverter::toString(MirrorSpotSize));
  parameters.push_back(VSDataConverter::toString(MirrorSpotSizeDisp));
  parameters.push_back(VSDataConverter::toString(MirrorDegradingFactor));
  parameters.push_back(VSDataConverter::toString(MirrorAlignTangentDisp));
  parameters.push_back(VSDataConverter::toString(MirrorPosTangentDisp));
  parameters.push_back(VSDataConverter::toString(MirrorPosNormalDisp));
  parameters.push_back(VSDataConverter::toString(MirrorLabelingParity));
  parameters.push_back(VSDataConverter::toString(MirrorMissingList));
  parameters.push_back(VSDataConverter::toString(CameraDiameter));
  parameters.push_back(VSDataConverter::toString(CameraFPTransX));
  parameters.push_back(VSDataConverter::toString(CameraFPTransY));
  parameters.push_back(VSDataConverter::toString(CameraFPTransZ));
  parameters.push_back(VSDataConverter::toString(CameraFPRotX));
  parameters.push_back(VSDataConverter::toString(CameraFPRotY));
  parameters.push_back(VSDataConverter::toString(CameraFPRotZ));
  parameters.push_back(VSDataConverter::toString(CameraIP));
  parameters.push_back(VSDataConverter::toString(PixelSpacing));
  parameters.push_back(VSDataConverter::toString(PixelConcSurvProb));
  parameters.push_back(VSDataConverter::toString(PixelDiameter));
  parameters.push_back(VSDataConverter::toString(PixelLabelingParity));
  parameters.push_back(VSDataConverter::toString(PixelMissingList));

  assert(parameters.size() == NARRAYINIITEMS);

  for(unsigned i=0;i<parameters.size();i++)
    {
      if(i)stream << std::endl;
      stream << array_ini_comment[i] << std::endl
             << "  " << parameters[i] << std::endl;
    }
}


#ifdef TEST_MAIN
int main(int argc, char** argv)
{
  VSOArrayParameters param;
  if(param.readFromArrayINIFile("array.ini"))
    param.writeToArrayINIFile(std::cout);
}
#endif

#ifdef TEST_MAIN2
int main(int argc, char** argv)
{
  Options options(argc,argv);
  VSOArrayParameters::zeroCanonicalValues();
  VSOArrayParameters::setCanonicalValuesFromOptions(options);
  VSOArrayParameters param(true);
  param.dump(std::cout);
  for(unsigned i=0;i<argc;i++){ if(i!=0)std::cout << ' '; std::cout << argv[i]; }
  std::cout << std::endl;
}
#endif
